import random
import asyncio
import logging
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.deep_linking import get_start_link
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from urllib.parse import urlparse, parse_qs

from aiogram import Bot, Dispatcher, executor
from aiogram import types
import abilities
import histories
import pandas as pd
import os.path
import string
import csv
import re

logging.basicConfig(level=logging.INFO)

bot = Bot('')


storage = MemoryStorage()

dp = Dispatcher(bot, storage=storage)
csv_file = 'bot_members.csv'
csv_file_for_text = 'room_text.csv'
columns = ['Full Name', 'Chat ID']
columns_for_text = ['Chat ID', 'Text']

if not os.path.isfile(csv_file):
    df = pd.DataFrame(columns=columns)
    df.to_csv(csv_file, index=False)

if not os.path.isfile(csv_file_for_text):
    df = pd.DataFrame(columns=columns_for_text)
    df.to_csv(csv_file_for_text, index=False)
@dp.message_handler(commands="sta1rt")
async def start(message: types.Message):
    print(message.get_args())

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "C—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É",
        "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏",
    ]
    keyboard.add(*buttons)

    await bot.send_message(
        message.chat.id,
        "–í—ñ—Ç–∞—î–º–æ, {0.first_name}!\n–°—Ç–≤–æ—Ä–∏ –∞–±–æ –¥–æ–ª—É—á–∏—Å—å –¥–æ —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏, –∞–±–∏ –ø–æ—á–∞—Ç–∏ –≥—Ä—É\n ".format(message.from_user),
        parse_mode='html',
        reply_markup=keyboard
    )

@dp.message_handler(text='–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏')
async def room(message):
    with open(csv_file, 'r') as file:
        csv_reader = csv.DictReader(file)
        room_ids = set(row['Room ID'] for row in csv_reader)

    # Create inline buttons for each unique Room ID
    inline_keyboard = types.InlineKeyboardMarkup(row_width=2)
    for room_id in room_ids:
        inline_keyboard.add(types.InlineKeyboardButton(room_id, callback_data=f"join_room_{room_id}"))

    await bot.send_message(
        message.chat.id,
        "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:",
        reply_markup=inline_keyboard
    )

@dp.callback_query_handler(lambda query: query.data.startswith('join_room_'))
async def join_room_callback(query: types.CallbackQuery):
    room_id = query.data.split('_')[2]  # Extract the room ID from the callback data
    user_chat_id = query.message.chat.id


    df = pd.read_csv(csv_file)
    df.loc[df['Chat ID'] == user_chat_id, 'Room ID'] = room_id
    df.to_csv(csv_file, index=False)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üë§–ü–µ—Ä—Å–æ–Ω–∞",
        "üåã–Ü—Å—Ç–æ—Ä—ñ—è",
        "üõñ–ë—É–Ω–∫–µ—Ä",
        "üìñ–ü—Ä–∞–≤–∏–ª–∞",
        "‚öôÔ∏è"
    ]
    keyboard.add(*buttons)

    await bot.send_message(
        query.message.chat.id,
        f"You have joined room {room_id}.",
        reply_markup=keyboard
    )



@dp.message_handler(text='C—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É')
async def room(message):
    df = pd.read_csv(csv_file)
    user_chat_id = message.chat.id
    user_full_name = message.from_user.full_name

    random_room = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(5))

    if user_chat_id in df['Chat ID'].values:
        df.loc[df['Chat ID'] == user_chat_id, 'Full Name'] = user_full_name
    else:
        new_row = pd.DataFrame([[user_full_name, user_chat_id]], columns=columns)
        df = pd.concat([df, new_row], ignore_index=True)

    df.loc[df['Chat ID'] == user_chat_id, 'Room ID'] = random_room
    df.to_csv(csv_file, index=False)
    await bot.send_message(message.chat.id, random_room)
    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üë§–ü–µ—Ä—Å–æ–Ω–∞",
        "üåã–Ü—Å—Ç–æ—Ä—ñ—è",
        "üõñ–ë—É–Ω–∫–µ—Ä",
        "üìñ–ü—Ä–∞–≤–∏–ª–∞",
        "‚öôÔ∏è"
    ]
    keyboard1.add(*buttons)
    await bot.send_message(
        message.chat.id,
        "–í—ñ—Ç–∞—î–º–æ, {0.first_name}!\n–°–∫–æ—Ä–æ —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –≥—Ä–∞. –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å —É —Ç–µ–±–µ "
        "–≤–∏–π–¥–µ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ –±—É–Ω–∫–µ—Ä\n –ù–æ–º–µ—Ä —Ç–≤–æ—î—ó —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏: ‚ùáÔ∏è{1}‚ùáÔ∏è ".format(message.from_user, random_room),
        parse_mode='html',
        reply_markup=keyboard1
    )

@dp.message_handler(text='‚öôÔ∏è')
async def room(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "C—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É",
        "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏",
    ]
    keyboard.add(*buttons)

    await bot.send_message(
        message.chat.id,
        "–í—ñ—Ç–∞—î–º–æ, {0.first_name}!\n–°—Ç–≤–æ—Ä–∏ –∞–±–æ –¥–æ–ª—É—á–∏—Å—å –¥–æ —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏, –∞–±–∏ –ø–æ—á–∞—Ç–∏ –≥—Ä—É\n ".format(message.from_user),
        parse_mode='html',
        reply_markup=keyboard
    )

@dp.message_handler(commands=['send_link'])
async def send_link_message(message: types.Message):
    # Create the link
    link_text = "Click here"
    link_url = "https://t.me/Bunker_beta_bot?start=share6"
    link = f"[{link_text}]({link_url})"

    # Create the message with the link
    text_message = f"Please {link} for more information."

    # Send the message
    await message.answer(text_message, parse_mode=types.ParseMode.MARKDOWN)

@dp.message_handler(text='üõñ–ë—É–Ω–∫–µ—Ä')
async def bunker(message):
    locate = ["–ê–Ω–∫–∞—Ä–∞, –¢—É—Ä–µ—á—á–∏–Ω–∞", "–ú–æ—Å–∫–≤–∞, –†–æ—Å—ñ—è", "–õ–æ–Ω–¥–æ–Ω, –ë—Ä–∏—Ç–∞–Ω—ñ—è ", "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞", "–ñ–º–µ—Ä–∏–Ω–∫–∞, –£–∫—Ä–∞—ó–Ω–∞",
              "–¢–µ–≥—É—Å—ñ–≥–∞–ª—å–ø–∞, –ì–æ–Ω–¥—É—Ä–∞—Å", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω, –°–®–ê", "–ê–±—É-–î–∞–±—ñ, –û–ê–ï", "–ë–∞–∫—É, –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
              "–ë—Ä—é—Å–µ–ª—å, –ë–µ–ª—å–≥—ñ—è",
              "–ë—É—Ö–∞—Ä–µ—Å—Ç, –†—É–º—É–Ω—ñ—è", "–î–µ–ª—ñ, –Ü–Ω–¥—ñ—è", "–ú—ñ–Ω—Å—å–∫, –ë—ñ–ª–æ—Ä—É—Å—ñ—è", "–°–∞–º–±—ñ—Ä, –£–∫—Ä–∞—ó–Ω–∞", "–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü—ñ—è",
              "–ë–µ—Ä–ª—ñ–Ω, –ù—ñ–º–µ—á—á–∏–Ω–∞", "–í–∞—Ä—à–∞–≤–∞, –ü–æ–ª—å—â–∞"]

    vorog = ["–î–∞–ª–µ–∫–æ", "1 –∫–º", "5 –∫–º", "10 –∫–º", "20 –∫–º", "50 –∫–º", "100 –∫–º", "500 –º", "–ù–µ–≤—ñ–¥–æ–º–æ"]
    v = "–ë—É–Ω–∫–µ—Ä ‚Ññ" + str(random.randint(0, 999)) + "\n" + "–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: " + str(random.choice(locate))\
        + "\n" + "–†–æ–∑–º—ñ—Ä: " + str(random.randint(30, 800)) + "m¬≤" + "\n" + "–á–∂—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞: " \
        + str(random.randint(1, 52)) + " –º—ñ—Å." + "\n" + "–î–æ –≤–æ—Ä–æ–∂–æ–≥–æ –±—É–Ω–∫–µ—Ä–∞: " + str(random.choice(vorog)  \
        + "\n" + "–ß–∞—Å —è–∫–∏–π —Ç—Ä–µ–±–∞ –ø—Ä–æ–±—É—Ç–∏ –≤ –±—É–Ω–∫–µ—Ä—ñ: " + str(random.randint(36, 600)) + " –º—ñ—Å.")
    await bot.send_message(message.chat.id, v)
@dp.message_handler(text='üë§–ü–µ—Ä—Å–æ–Ω–∞')
@dp.throttled(lambda message, loop, *args, **kwargs: loop.create_task(bot.send_message(message.from_user.id, "‚ùå –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω")),rate=10*60)
async def person(message):
    df = pd.read_csv(csv_file)

    loading = ["üë´–û–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç—å", "üóÑ–ì–æ—Ç—É—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é", "üíä–õ—ñ–∫—É—î–º–æ –∑–¥–æ—Ä–æ–≤'—è", "üß≥–ù–∞–±–∏—Ä–∞—î–º–æ –±–∞–≥–∞–∂", "üìù–ù–∞–≤—á–∞—î–º–æ –æ—Å–≤—ñ—Ç–∏", "üÉè–†–æ–∑–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ –¥—ñ—ó"]
    upload_message = await bot.send_message(chat_id=message.chat.id, text="ü´ÄC—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    await asyncio.sleep(1)
    for i in loading:
        await upload_message.edit_text(text=f"{i}")
        await asyncio.sleep(0.5)
    await asyncio.sleep(0.5)
    await bot.delete_message(chat_id=message.chat.id, message_id=upload_message.message_id)
    age = random.randint(16, 95)
    childweights = (0, 0)
    if age < 30:
        childweights = (8, 1)
    elif age < 35:
        childweights = (5, 1)
    elif age < 40:
        childweights = (2, 1)
    elif age < 50:
        childweights = (1, 1)
    elif age < 60:
        childweights = (1, 3)
    elif age < 70:
        childweights = (1, 5)
    elif age < 100:
        childweights = (1, 8)
    global stat
    global ages
    random_sex = str("–°—Ç–∞—Ç—å: ") + str(random.choice(abilities.sex))
    random_age = str("–í—ñ–∫: ") + str(age) + str(" —Ä.")
    random_profession = str("–ü—Ä–æ—Ñ–µ—Å—ñ—è: ") + str(random.choice(abilities.profesion))
    random_childability = str("–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –º–∞—Ç–∏ –¥—ñ—Ç–µ–π: ") + str(*random.choices(abilities.childability, weights=childweights))
    random_childdesire = str("–ë–∞–∂–∞–Ω–Ω—è –º–∞—Ç–∏ –¥—ñ—Ç–µ–π: ") + str(*random.choices(abilities.childfree, weights=(3, 1)))
    random_health = str("–ó–¥–æ—Ä–æ–≤'—è: ") + str(*random.choices(abilities.health, weights=abilities.healthweights))
    random_disability = str("–Ü–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å: ") + str(*random.choices(abilities.disability, weights=abilities.disabilityweights))
    random_phobia = str("–§–æ–±—ñ—è: ") + str(random.choice(abilities.phobia))
    random_hobby = str("–ì–æ–±—ñ: ") + str(random.choice(abilities.hobby))
    random_education = str("–î—Ä—É–≥–∞ –æ—Å–≤—ñ—Ç–∞: ") + str(*random.choices(abilities.education, weights=abilities.educationweights))
    random_inventory = str("–ë–∞–≥–∞–∂: ") + str(random.choice(abilities.inventory))
    random_nature = str("–•–∞—Ä–∞–∫—Ç–µ—Ä: ") + str(random.choice(abilities.nature))
    random_religion = str("–†–µ–ª—ñ–≥—ñ—è: ") + str(*random.choices(abilities.religion, weights=abilities.religionweights))
    random_addinfo = str("–î–æ–¥. —ñ–Ω—Ñ–æ: ") + str(random.choice(abilities.addinfo))
    random_mom = str("–ú–∞—Ç–∏: ") + str(random.choice(abilities.profesion))
    random_dad = str("–ë–∞—Ç—å–∫–æ: ") + str(random.choice(abilities.profesion))
    random_action1 = str("üÉè–ö–∞—Ä—Ç–∞ –¥—ñ—ó ‚Ññ1:\n ") + str(random.choice(abilities.actioncard))
    random_action2 = str("üÉè–ö–∞—Ä—Ç–∞ –¥—ñ—ó ‚Ññ2:\n ") + str(random.choice(abilities.actioncard))
    a = "üë´‚è≥üë∑ü´Éüëºü¶†üë®‚Äçü¶Ωüï∑üé®üéìüéíüó£üïçüìùüëµüë®‚Äçü¶≥"
    await bot.send_message(message.chat.id, "[üë´](https://t.me/Bunker_beta_bot?start=share3)" + random_sex, parse_mode=types.ParseMode.MARKDOWN)
    await bot.send_message(message.chat.id, random_age)
    await bot.send_message(message.chat.id, random_profession)
    await bot.send_message(message.chat.id, random_childability)
    await bot.send_message(message.chat.id, random_childdesire)
    await bot.send_message(message.chat.id, random_health)
    await bot.send_message(message.chat.id,random_disability)
    await bot.send_message(message.chat.id, random_phobia)
    await bot.send_message(message.chat.id, random_hobby)
    await bot.send_message(message.chat.id, random_education)
    await bot.send_message(message.chat.id, random_inventory)
    await bot.send_message(message.chat.id, random_nature)
    await bot.send_message(message.chat.id, random_religion)
    await bot.send_message(message.chat.id, random_addinfo)
    await bot.send_message(message.chat.id, random_mom)
    await bot.send_message(message.chat.id, random_dad)
    await bot.send_message(message.chat.id, random_action1)
    await bot.send_message(message.chat.id, random_action2)


    # Update the DataFrame with the 'stat' and 'ages' variables
    user_chat_id = message.chat.id
    user_full_name = message.from_user.full_name

    room_broadcast_text = f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è {message.from_user.full_name}"

    df1 = pd.read_csv(csv_file_for_text)
    if user_chat_id in df1['Chat ID'].values:
        df1.loc[df['Chat ID'] == user_chat_id, 'Text'] = room_broadcast_text
    else:
        new_row = pd.DataFrame([[user_chat_id, room_broadcast_text]], columns=columns_for_text)
        df1 = pd.concat([df1, new_row], ignore_index=True)
    room_broadcast_text = ""
    texts = df1['Text']
    for text in texts:
        room_broadcast_text += text + "\n\n"
    specific_room_id = df.loc[df['Chat ID'] == user_chat_id]['Room ID'].iloc[0]

    global upload_room_message
    upload_room_message = []
    for index, member in df.iterrows():
        room_id = member['Room ID']
        chat_id = member['Chat ID']
        if room_id == specific_room_id:
            upload_room_message.append(await bot.send_message(chat_id, room_broadcast_text))
    df1.to_csv(csv_file_for_text, index=False)


    df.loc[df['Chat ID'] == user_chat_id, 'Sex'] = random_sex
    df.loc[df['Chat ID'] == user_chat_id, 'Age'] = random_age
    df.loc[df['Chat ID'] == user_chat_id, 'Profession'] = random_profession
    df.loc[df['Chat ID'] == user_chat_id, 'Child Ability'] = random_childability
    df.loc[df['Chat ID'] == user_chat_id, 'Child Desire'] = random_childdesire
    df.loc[df['Chat ID'] == user_chat_id, 'Health'] = random_health
    df.loc[df['Chat ID'] == user_chat_id, 'Disability'] = random_disability
    df.loc[df['Chat ID'] == user_chat_id, 'Phobia'] = random_phobia
    df.loc[df['Chat ID'] == user_chat_id, 'Hobby'] = random_hobby
    df.loc[df['Chat ID'] == user_chat_id, 'Education'] = random_education
    df.loc[df['Chat ID'] == user_chat_id, 'Inventory'] = random_inventory
    df.loc[df['Chat ID'] == user_chat_id, 'Nature'] = random_nature
    df.loc[df['Chat ID'] == user_chat_id, 'Religion'] = random_religion
    df.loc[df['Chat ID'] == user_chat_id, 'Additional Info'] = random_addinfo
    df.loc[df['Chat ID'] == user_chat_id, 'Mother'] = random_mom
    df.loc[df['Chat ID'] == user_chat_id, 'Father'] = random_dad
    df.loc[df['Chat ID'] == user_chat_id, 'Action 1'] = random_action1
    df.loc[df['Chat ID'] == user_chat_id, 'Action 2'] = random_action2

    df.to_csv(csv_file, index=False)
@dp.message_handler(text='üåã–Ü—Å—Ç–æ—Ä—ñ—è')
async def story(message):
    stories = [histories.story1, histories.story2, histories.story3, histories.story4,
    histories.story5, histories.story6, histories.story7, histories.story8]
    await bot.send_message(message.chat.id, str(random.choice(stories)))
@dp.message_handler(text='üìñ–ü—Ä–∞–≤–∏–ª–∞')
async def story(message):
    rules = """–ü—Ä–∞–≤–∏–ª–∞\n           
‚Ä¢ –ö–æ–∂–µ–Ω –≥—Ä–∞–≤–µ—Ü—å —Å—Ç–≤–æ—Ä—é—î —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ü–µ—Ä—Å–æ–Ω–∞" \n\
‚Ä¢ –ö–æ–ª–µ–∫—Ç–∏–≤–Ω–∏–º —Ä—ñ—à–µ–Ω–Ω—è–º –æ–±–∏—Ä–∞—î—Ç—å—Å—è –ª—é–¥–∏–Ω–∞, —è–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –≥—Ä–∏ –∑–∞—á–∏—Ç–∞—î \
—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫—É –æ—Ç—Ä–∏–º–∞—î —á–µ—Ä–µ–∑ –∫–æ–¥–æ–≤—ñ —Å–ª–æ–≤–∞: "–Ü—Å—Ç–æ—Ä—ñ—è" —Ç–∞ "–ë—É–Ω–∫–µ—Ä". \n\
‚Ä¢ –õ—é–¥–∏–Ω–∞, —è–∫–∞ –æ–≥–æ–ª–æ—à—É–≤–∞–ª–∞ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ—á–∏–Ω–∞—î –∫–æ–ª–æ —Ç–∞ –æ–±–∏—Ä–∞—î –π–æ–≥–æ –Ω–∞–ø—Ä—è–º. \n\
‚Ä¢ –ì—Ä–∞–≤—Ü—ñ –ø–æ —á–µ—Ä–∑—ñ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ 2 –ø—É–Ω–∫—Ç–∏ –Ω–∞ –≤–∏–±—ñ—Ä —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–∂–Ω–æ–≥–æ –∫–æ–ª–∞(–û–∫—Ä—ñ–º \
–ø–µ—Ä—à–æ–≥–æ –∫–æ–ª–∞, –ø—ñ–¥ —á–∞—Å –Ω—å–æ–≥–æ —É—Å—ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å, –ø—Ä–æ—Ñ–µ—Å—ñ—é —Ç–∞ –æ–¥–Ω—É —Ö-–∫—É –Ω–∞ –≤–∏–±—ñ—Ä) \
–Ω–∞ —Ü–µ —ó–º \
–≤—ñ–¥–≤–µ–¥–µ–Ω–æ –ø–æ 2 —Ö–≤–∏–ª–∏–Ω–∏, –∑–∞ —Ü–µ–π —á–∞—Å –≤–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –¥–æ–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è –±—É–Ω–∫–µ—Ä–∞ \
–≤—ñ–¥–Ω–æ—Å–Ω–æ —Ç–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —è–∫—ñ –≤–æ–Ω–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —â–æ–π–Ω–æ –∞–±–æ —Ä–∞–Ω—ñ—à–µ. \n\
‚Ä¢ –£ –∫—ñ–Ω—Ü—ñ –∫–æ–ª–∞ –≥—Ä–∞–≤—Ü—ñ –≥–æ–ª–æ—Å—É—é—Ç—å –∑–∞ –ª—é–¥–∏–Ω—É, —è–∫—É –±—É–¥–µ –≤–∏–≥–Ω–∞–Ω–æ –∑ –∫–æ–ª–∞. \n\
‚Ä¢ –ö–∞—Ä—Ç–∏ –¥—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –Ω–µ —î —ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å –≥—Ä–∏(–∑–∞ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –º–æ–º–µ–Ω—Ç—É \
–∫–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–∞—Ä—Ç—É –≤–∏–≥–Ω–∞–Ω–∏–π –∑ –∫–æ–ª–∞ —á–∏ –º–µ—Ä—Ç–≤–∏–π :) \n\
‚Ä¢ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ—Ç—Ä–∏–º–∞—Ç–∏—Å—å —É –≥—Ä—ñ —è–∫–æ–º–æ–≥–∞ –¥–æ–≤—à–µ \n\
‚Ä¢ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è, –∫–æ–ª–∏ —É –∫–æ–ª—ñ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø–µ–≤–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π, —Å–∫—ñ–ª—å–∫–∏ —Å–∞–º–µ - –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ –≤–∞–º \n\
–©–∞—Å—Ç–∏ —Ç–æ–±—ñ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ –±—É–Ω–∫–µ—Ä \n\
                    """
    await bot.send_message(message.chat.id, str(rules))


@dp.message_handler(commands="broadcast")
async def broadcast(message: types.Message):
    bot_members_file = 'bot_members.csv'
    df_members = pd.read_csv(bot_members_file)
    if message.from_user.id == 275068212:  # Replace YOUR_ADMIN_USER_ID with the actual user ID of the admin
        text = message.text[10:]  # Extract the text after "/broadcast "
        if text:

            for index, member in df_members.iterrows():
                chat_id = member['Chat ID']
                await bot.send_message(chat_id, text)
        else:
            await message.reply("Please provide a message to broadcast.")


@dp.message_handler(commands="start")
async def echo_message(message: types.Message):

    numbers = re.findall(r'\d+', message.get_args())
    arg = 0
    for number in numbers:
        arg = number
    arg = int(arg)
    if message.get_args() == f"share{arg}":
        await message.delete()
        user_chat_id = message.chat.id
        df = pd.read_csv(csv_file_for_text)
        room_broadcast_text = df.loc[df['Chat ID'] == user_chat_id]['Text'].iloc[0]
        print(message.text)
        with open('bot_members.csv', 'r') as file:
            reader = csv.reader(file)
            next(reader)
            for row in reader:
                print(row[1])
                if row[1] == str(message.from_user.id):
                    room_broadcast_text += "\n"
                    room_broadcast_text += row[arg]
                    df.loc[df['Chat ID'] == user_chat_id, 'Text'] = room_broadcast_text
                    df.to_csv(csv_file_for_text, index=False)
                    texts = df['Text']
                    room_broadcast_text = ""
                    for text in texts:
                        room_broadcast_text += text + "\n\n"
                    for i in upload_room_message:
                            await i.edit_text(text=room_broadcast_text)

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            "C—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É",
            "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏",
        ]
        keyboard.add(*buttons)

        await bot.send_message(
            message.chat.id,
            "–í—ñ—Ç–∞—î–º–æ, {0.first_name}!\n–°—Ç–≤–æ—Ä–∏ –∞–±–æ –¥–æ–ª—É—á–∏—Å—å –¥–æ —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏, –∞–±–∏ –ø–æ—á–∞—Ç–∏ –≥—Ä—É\n ".format(
                message.from_user),
            parse_mode='html',
            reply_markup=keyboard
        )


        # You can perform further actions here if the condition is met
    # else:
    #     await bot.send_message(message.from_user.id, str("–°—Ö–æ–∂–µ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ù–∞—Ç–∏—Å–Ω–∏ —Å—é–¥–∏ ‚Äî \"/start\""))


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
